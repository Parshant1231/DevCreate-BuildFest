import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { Document, Packer, Paragraph, Table, TableCell, TableRow, TextRun, WidthType } from 'docx';
import { saveAs } from 'file-saver';

export interface ExportData {
  title: string;
  subtitle?: string;
  data: any[];
  headers: string[];
  metadata?: {
    generatedBy?: string;
    generatedAt?: string;
    institution?: string;
  };
}

export const exportToPDF = async (elementId: string, filename: string = 'timetable.pdf') => {
  try {
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error('Element not found');
    }

    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4'
    });

    const imgWidth = 297; // A4 width in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
    pdf.save(filename);
    
    return { success: true, message: 'PDF exported successfully' };
  } catch (error) {
    console.error('PDF export error:', error);
    return { success: false, message: 'Failed to export PDF' };
  }
};

export const exportToDOC = async (data: ExportData, filename: string = 'timetable.docx') => {
  try {
    const doc = new Document({
      sections: [{
        properties: {},
        children: [
          new Paragraph({
            children: [
              new TextRun({
                text: data.title,
                bold: true,
                size: 32,
              }),
            ],
            alignment: 'center',
            spacing: { after: 400 },
          }),
          ...(data.subtitle ? [
            new Paragraph({
              children: [
                new TextRun({
                  text: data.subtitle,
                  size: 24,
                }),
              ],
              alignment: 'center',
              spacing: { after: 400 },
            })
          ] : []),
          ...(data.metadata ? [
            new Paragraph({
              children: [
                new TextRun({
                  text: `Generated by: ${data.metadata.generatedBy || 'Smart Timetable Scheduler'}`,
                  size: 20,
                }),
              ],
              spacing: { after: 200 },
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: `Generated at: ${data.metadata.generatedAt || new Date().toLocaleString()}`,
                  size: 20,
                }),
              ],
              spacing: { after: 400 },
            })
          ] : []),
          new Table({
            width: {
              size: 100,
              type: WidthType.PERCENTAGE,
            },
            rows: [
              new TableRow({
                children: data.headers.map(header => 
                  new TableCell({
                    children: [
                      new Paragraph({
                        children: [
                          new TextRun({
                            text: header,
                            bold: true,
                            size: 20,
                          }),
                        ],
                      }),
                    ],
                    width: { size: 100 / data.headers.length, type: WidthType.PERCENTAGE },
                  })
                ),
              }),
              ...data.data.map(row => 
                new TableRow({
                  children: Object.values(row).map(value => 
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: String(value || ''),
                              size: 18,
                            }),
                          ],
                        }),
                      ],
                    })
                  ),
                })
              ),
            ],
          }),
        ],
      }],
    });

    const buffer = await Packer.toBuffer(doc);
    const blob = new Blob([buffer], { 
      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
    });
    
    saveAs(blob, filename);
    
    return { success: true, message: 'DOC exported successfully' };
  } catch (error) {
    console.error('DOC export error:', error);
    return { success: false, message: 'Failed to export DOC' };
  }
};

export const exportToExcel = async (data: ExportData, filename: string = 'timetable.csv') => {
  try {
    const csvContent = [
      data.headers.join(','),
      ...data.data.map(row => 
        Object.values(row).map(value => 
          String(value || '').replace(/,/g, ';')
        ).join(',')
      )
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, filename);
    
    return { success: true, message: 'Excel file exported successfully' };
  } catch (error) {
    console.error('Excel export error:', error);
    return { success: false, message: 'Failed to export Excel file' };
  }
};

export const createTimetableExportData = (timetable: any, metadata?: any): ExportData => {
  return {
    title: 'Generated Timetable',
    subtitle: `${metadata?.semester || 'Current'} Semester - ${metadata?.department || 'All Departments'}`,
    headers: ['Time', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    data: timetable.slots || [],
    metadata: {
      generatedBy: metadata?.generatedBy || 'Smart Timetable Scheduler',
      generatedAt: new Date().toLocaleString(),
      institution: metadata?.institution || 'Educational Institution'
    }
  };
};

